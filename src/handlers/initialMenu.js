// src/handlers/initialMenu.js

const { sendTextMessage } = require('../services/whatsappAPI');
const Student = require('../models/Student');
const academicDataHandler = require('./academicData'); // Manipulador de dados espec√≠ficos

// --- Constantes do Menu ---
const MAIN_MENU = `
ü§ñ Ol√°! Eu sou a Sofia, sua assistente acad√™mica virtual.
Em que posso te ajudar hoje?

*Escolha uma op√ß√£o digitando o n√∫mero correspondente:*

1Ô∏è‚É£ - Declarar√£o de V√≠nculo
2Ô∏è‚É£ - Boletim de Notas
3Ô∏è‚É£ - Hor√°rio de Aulas
4Ô∏è‚É£ - Data Final do Semestre
5Ô∏è‚É£ - Calend√°rio Acad√™mico
`;

/**
 * Fun√ß√£o principal que roteia a mensagem recebida.
 * @param {string} from - N√∫mero do aluno que enviou a mensagem.
 * @param {string} text - Conte√∫do da mensagem.
 */
const handleMenu = async (from, text) => {
    // Limpeza da mensagem (remove espa√ßos e torna min√∫scula)
    const cleanedText = text.trim().toLowerCase();

    // 1. VERIFICAR CADASTRO DO ALUNO
    // A Sofia precisa saber quem est√° falando. Usaremos o WhatsApp number como ID.
    const student = await Student.findOne({ whatsappNumber: from });
    
    if (!student) {
        // Aluno n√£o encontrado no DB. Pedimos para ele se identificar ou cadastrar.
        const registrationMessage = `
        ‚ùå Parece que seu n√∫mero (${from}) n√£o est√° cadastrado em nossa base de alunos.
        Por favor, envie sua *matr√≠cula* para que eu possa te identificar.
        `;
        return sendTextMessage(from, registrationMessage);
    }

    // 2. ROTEAMENTO DAS OP√á√ïES DO MENU

    // Se a mensagem for "menu", "ol√°", ou "oi", mostramos o menu
    if (cleanedText === 'menu' || cleanedText === 'ol√°' || cleanedText === 'oi' || cleanedText === 'ola') {
        return sendTextMessage(from, MAIN_MENU);
    }
    
    // Se for uma das op√ß√µes do menu principal
    switch (cleanedText) {
        case '1':
            // Delegamos a funcionalidade para o handler de dados acad√™micos
            return academicDataHandler.handleDeclaration(from, student, 'vinculo');
            
        case '2':
            return academicDataHandler.handleGrades(from, student);
            
        case '3':
            return academicDataHandler.handleSchedule(from, student);
            
        case '4':
            return academicDataHandler.handleFinalSemesterDate(from, student);
            
        case '5':
            return academicDataHandler.handleCalendar(from, student);
            
        default:
            // Resposta para op√ß√µes n√£o reconhecidas
            return sendTextMessage(from, 
                `N√£o entendi sua solicita√ß√£o. Por favor, escolha um n√∫mero do menu ou digite "menu" para ver as op√ß√µes:\n${MAIN_MENU}`
            );
    }
};

/**
 * Fun√ß√£o respons√°vel por cadastrar/identificar o aluno (placeholder).
 * NOTE: Esta √© uma simula√ß√£o. Na pr√°tica, voc√™ validaria com um sistema acad√™mico real.
 */
const handleRegistration = async (from, registrationId) => {
    // L√≥gica para buscar a matr√≠cula e, se v√°lido, salvar o whatsappNumber
    // Se a matr√≠cula for v√°lida:
    // await Student.updateOne({ registration: registrationId }, { whatsappNumber: from });
    
    // Por enquanto, apenas um placeholder:
    return sendTextMessage(from, `‚úÖ Matr√≠cula recebida! Verificando... Seus dados foram validados!
    Agora digite "menu" para acessar a *Sofia*.`);
}


module.exports = {
    handleMenu,
    handleRegistration // A ser usado no fluxo de identifica√ß√£o, se necess√°rio
};